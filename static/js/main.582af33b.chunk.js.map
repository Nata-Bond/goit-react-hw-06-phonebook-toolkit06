{"version":3,"sources":["components/filter/filter.module.css","redux/contacts/contactsActions.js","components/contactForm/ContactForm.js","components/contactList/ContactListItem.js","components/contactList/ContactList.js","components/filter/Filter.js","App.js","redux/contacts/contactsReducer.js","redux/store.js","index.js","components/contactForm/contactForm.module.css"],"names":["module","exports","addContact","createAction","name","number","payload","id","shortid","generate","deleteContact","changeFilter","ContactForm","state","handleInputChange","e","setState","target","value","checkFullIsForm","length","alert","checkUnique","contacts","props","isExist","find","contact","handleSubmit","preventDefault","onAdd","unique","fullForm","reset","className","s","form","onSubmit","this","input","type","onChange","button","Component","connect","items","dispatch","mapDispatchToProps","listItem","onClick","filter","filteredContacts","console","log","normalizedFilter","toLowerCase","includes","getFilteredContacts","list","map","App","createReducer","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devTools","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"sJACAA,EAAOC,QAAU,CAAC,MAAQ,wB,iMCYpBC,EAAaC,YAAa,gBAAgB,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAT,MAAuB,CACrEC,QAAS,CACPC,GAAIC,IAAQC,WACZL,OACAC,cASEK,EAAgBP,YAAa,mBAO7BQ,EAAeR,YAAa,yB,OC5B5BS,E,4MACJC,MAAQ,CACNT,KAAM,GACNC,OAAQ,I,EAaVS,kBAAoB,SAACC,GACnB,EAAKC,SAAL,eAAiBD,EAAEE,OAAOb,KAAOW,EAAEE,OAAOC,S,EAG5CC,gBAAkB,SAACf,EAAMC,GACvB,SAAKD,EAAKgB,OAAS,EAAMf,EAAOe,OAAS,KAGvCC,MAAM,qBACC,I,EAIXC,YAAc,SAAClB,EAAMC,GAAY,IACvBkB,EAAa,EAAKC,MAAlBD,SAER,GAAIA,EAASH,OAAS,EAAG,CACvB,IAAMK,IAAYF,EAASG,MACzB,SAACC,GAAD,OAAaA,EAAQvB,OAASA,GAAQuB,EAAQtB,SAAWA,KAG3D,OADAoB,GAAWJ,MAAM,GAAD,OAAIjB,GAAQC,EAAZ,uBACRoB,EAEV,OAAO,G,EAGTG,aAAe,SAACb,GACdA,EAAEc,iBADkB,MAEK,EAAKhB,MAAtBT,EAFY,EAEZA,KAAMC,EAFM,EAENA,OACNyB,EAAU,EAAKN,MAAfM,MACFC,EAAS,EAAKT,YAAYlB,EAAMC,GAEhC2B,EAAW,EAAKb,gBAAgBf,EAAMC,GAE5C0B,GAAUC,GAAYF,EAAM,EAAKjB,OACjC,EAAKoB,S,EAGPA,MAAQ,WACN,EAAKjB,SAAS,CACZZ,KAAM,GACNC,OAAQ,M,4CAIZ,WACE,OACE,mCACE,uBAAM6B,UAAWC,IAAEC,KAAMC,SAAUC,KAAKV,aAAxC,UACE,yCAEE,uBACEM,UAAWC,IAAEI,MACbC,KAAK,OACLpC,KAAK,OACLc,MAAOoB,KAAKzB,MAAMT,KAClBqC,SAAUH,KAAKxB,uBAGnB,2CAEE,uBACEoB,UAAWC,IAAEI,MACbC,KAAK,MACLpC,KAAK,SACLc,MAAOoB,KAAKzB,MAAMR,OAClBoC,SAAUH,KAAKxB,uBAGnB,wBAAQoB,UAAWC,IAAEO,OAAQF,KAAK,SAAlC,0B,GArFgBG,aAsGXC,eARS,SAAC/B,GACvB,MAAO,CAAEU,SAAUV,EAAMU,SAASsB,UAGT,SAACC,GAAD,MAAe,CACxChB,MAAO,SAAC1B,EAAMC,GAAP,OAAkByC,EAAS5C,EAAWE,EAAMC,QAGtCuC,CAA6ChC,G,wBCrFtDmC,EAAqB,CAAErC,iBAEdkC,cAAQ,KAAMG,EAAdH,EAnBS,SAAC,GAAyC,IAAvCxC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,OAAQE,EAAwB,EAAxBA,GAAIG,EAAoB,EAApBA,cAC3C,OACE,qBAAIwB,UAAWC,IAAEa,SAAjB,UACE,iCACG5C,EADH,MACYC,KAEZ,wBACE6B,UAAWC,IAAEO,OACbF,KAAK,SACLS,QAAS,kBAAMvC,EAAcH,IAH/B,0BCyBSqC,eALS,SAAC/B,GAAD,MAAY,CAClCU,SAAUV,EAAMU,SAASsB,MACzBK,OAAQrC,EAAMU,SAAS2B,UAGe,KAAzBN,EA/BK,SAAC,GAA0B,IAAxBrB,EAAuB,EAAvBA,SAAU2B,EAAa,EAAbA,OAazBC,EAVsB,WAC1BC,QAAQC,IAAI9B,EAAU2B,GACtB,IAAMI,EAAmBJ,EAAOK,cAChC,OAAOhC,EAAS2B,QACd,SAACvB,GAAD,OACEA,EAAQvB,KAAKmD,cAAcC,SAASF,IACpC3B,EAAQtB,OAAOmD,SAASF,MAILG,GAGzB,OACE,oBAAIvB,UAAWC,IAAEuB,KAAjB,SACGP,GACCA,EAAiBQ,KAAI,SAAChC,GAAD,OACnB,cAAC,EAAD,eAAsCA,GAAhBA,EAAQpB,Y,iBCGlCwC,EAAqB,CAAEpC,gBAEdiC,eANS,SAAC/B,GACvB,MAAO,CAAEqC,OAAQrC,EAAMqC,UAKeH,EAAzBH,EAzBA,SAAC,GAA8B,IAA5BjC,EAA2B,EAA3BA,aAAcuC,EAAa,EAAbA,OAK9B,OACE,mCACE,gCACE,uBACEhB,UAAWC,IAAEI,MACbC,KAAK,OACLtB,MAAOgC,EACPT,SAXmB,SAAC1B,GAC1BJ,EAAaI,EAAEE,OAAOC,iBCYX0C,EAbH,WACV,OACE,gCACE,2CACA,cAAC,EAAD,IACA,0CACA,cAAC,EAAD,IAEA,cAAC,EAAD,Q,eCIAf,EAAQgB,YAAc,IAAD,mBACxB3D,GAAa,SAACW,EAAD,OAAUP,EAAV,EAAUA,QAAV,4BAA4BO,GAA5B,CAAmCP,OADxB,cAExBI,GAAgB,SAACG,EAAD,OAAUP,EAAV,EAAUA,QAAV,OACfO,EAAMqC,QAAO,SAACvB,GAAD,OAAaA,EAAQpB,KAAOD,QAHlB,IAcrB4C,EAASW,YAAc,GAAD,eACzBlD,GAAe,SAACmD,EAAD,YAAMxD,YAGTyD,cAAgB,CAC7BlB,QACAK,W,wBCxBIc,EAAU,YACXC,YAAqB,CACtBC,kBAAmB,CACjBC,eAAgB,CAACC,IAAOC,IAAWC,IAAOC,IAASC,IAAOC,SAK1DC,EAAwB,CAC5BC,IAAK,WACLC,YACAC,UAAW,CAAC,WAGRC,EAAQC,YAAe,CAC3BC,QAAS,CACPzD,SAAU0D,YAAeP,EAAuBQ,IAElDlB,aACAmB,UAAU,IAKG,GAAEL,QAAOM,UAFNC,YAAaP,I,QC5B/BQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUV,MAAOA,EAAMA,MAAvB,SACE,cAAC,IAAD,CAAaW,QAAS,KAAML,UAAWN,EAAMM,UAA7C,SACE,cAAC,EAAD,UAINM,SAASC,eAAe,U,sCCf1B3F,EAAOC,QAAU,CAAC,KAAO,0BAA0B,MAAQ,2BAA2B,OAAS,+B","file":"static/js/main.582af33b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"filter_input__2EEHk\"};","// import types from \"./contactsTypes\";\nimport shortid from \"shortid\";\nimport { createAction } from \"@reduxjs/toolkit\";\n\n// const addContact = ({ name, number }) => ({\n//   type: types.ADD,\n//   payload: {\n//     id: shortid.generate(),\n//     name,\n//     number,\n//   },\n// });\n\nconst addContact = createAction(\"contacts/Add\", ({ name, number }) => ({\n  payload: {\n    id: shortid.generate(),\n    name,\n    number,\n  },\n}));\n\n// const deleteContact = (id) => ({\n//   type: types.DELETE,\n//   payload: id,\n// });\n\nconst deleteContact = createAction(\"contacts/delete\");\n\n// const changeFilter = (filterValue) => ({\n//   type: types.CHANGE_FILTER,\n//   payload: filterValue,\n// });\n\nconst changeFilter = createAction(\"contacts/changeFilter\");\n\nexport { addContact, deleteContact, changeFilter };\n","import React, { Component } from \"react\";\nimport s from \"./contactForm.module.css\";\nimport { connect } from \"react-redux\";\nimport { addContact } from \"../../redux/contacts/contactsActions\";\n\nclass ContactForm extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  // handleImputName = (e) => {\n  //   console.log(e.target.value);\n  //   this.setState({ name: e.target.value });\n  // };\n\n  // handleImputNumber = (e) => {\n  //   console.log(e.target.value);\n  //   this.setState({ number: e.target.value });\n  // };\n\n  handleInputChange = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  checkFullIsForm = (name, number) => {\n    if ((name.length > 0) & (number.length > 0)) {\n      return true;\n    } else {\n      alert(`form is not full`);\n      return false;\n    }\n  };\n\n  checkUnique = (name, number) => {\n    const { contacts } = this.props;\n\n    if (contacts.length > 0) {\n      const isExist = !!contacts.find(\n        (contact) => contact.name === name || contact.number === number\n      );\n      isExist && alert(`${name || number} is already exist`);\n      return !isExist;\n    }\n    return true;\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const { name, number } = this.state;\n    const { onAdd } = this.props;\n    const unique = this.checkUnique(name, number);\n\n    const fullForm = this.checkFullIsForm(name, number);\n\n    unique && fullForm && onAdd(this.state);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({\n      name: \"\",\n      number: \"\",\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <form className={s.form} onSubmit={this.handleSubmit}>\n          <label>\n            Name\n            <input\n              className={s.input}\n              type=\"text\"\n              name=\"name\"\n              value={this.state.name}\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <label>\n            Number\n            <input\n              className={s.input}\n              type=\"tel\"\n              name=\"number\"\n              value={this.state.number}\n              onChange={this.handleInputChange}\n            />\n          </label>\n          <button className={s.button} type=\"submit\">\n            Add\n          </button>\n        </form>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return { contacts: state.contacts.items };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  onAdd: (name, number) => dispatch(addContact(name, number)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import React from \"react\";\nimport s from \"./contacts.module.css\";\nimport { connect } from \"react-redux\";\nimport { deleteContact } from \"../../redux/contacts/contactsActions\";\n\nconst ContactListItem = ({ name, number, id, deleteContact }) => {\n  return (\n    <li className={s.listItem}>\n      <span>\n        {name} : {number}\n      </span>\n      <button\n        className={s.button}\n        type=\"button\"\n        onClick={() => deleteContact(id)}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\nconst mapDispatchToProps = { deleteContact };\n\nexport default connect(null, mapDispatchToProps)(ContactListItem);\n","import React from \"react\";\nimport ContactListItem from \"./ContactListItem\";\nimport s from \"./contacts.module.css\";\nimport { connect } from \"react-redux\";\n\nconst ContactList = ({ contacts, filter }) => {\n  //this is it//\n\n  const getFilteredContacts = () => {\n    console.log(contacts, filter);\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(\n      (contact) =>\n        contact.name.toLowerCase().includes(normalizedFilter) ||\n        contact.number.includes(normalizedFilter)\n    );\n  };\n\n  const filteredContacts = getFilteredContacts();\n\n  // return \"muha\";\n  return (\n    <ul className={s.list}>\n      {filteredContacts &&\n        filteredContacts.map((contact) => (\n          <ContactListItem key={contact.id} {...contact} />\n        ))}\n    </ul>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  contacts: state.contacts.items,\n  filter: state.contacts.filter,\n});\n\nexport default connect(mapStateToProps, null)(ContactList);\n","import React from \"react\";\nimport s from \"./filter.module.css\";\nimport { connect } from \"react-redux\";\nimport { changeFilter } from \"../../redux/contacts/contactsActions\";\n\nconst Filter = ({ changeFilter, filter }) => {\n  const handleChangeFilter = (e) => {\n    changeFilter(e.target.value);\n  };\n\n  return (\n    <>\n      <label>\n        <input\n          className={s.input}\n          type=\"text\"\n          value={filter}\n          onChange={handleChangeFilter}\n        />\n      </label>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return { filter: state.filter };\n};\n\nconst mapDispatchToProps = { changeFilter };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from \"react\";\nimport ContactForm from \"./components/contactForm/ContactForm\";\n\nimport ContactList from \"./components/contactList/ContactList\";\nimport Filter from \"./components/filter/Filter\";\n\nconst App = () => {\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n\n      <ContactList />\n    </div>\n  );\n};\n\nexport default App;\n","import { combineReducers } from \"redux\";\nimport { createReducer } from \"@reduxjs/toolkit\";\n// import types from \"./contactsTypes\";\nimport { addContact, deleteContact, changeFilter } from \"./contactsActions\";\n\n// const items = (state = [], { type, payload }) => {\n//   switch (type) {\n//     case types.ADD:\n//       return [...state, payload];\n\n//     case types.DELETE:\n//       return state.filter((contact) => contact.id !== payload);\n\n//     default:\n//       return state;\n//   }\n// };\n\nconst items = createReducer([], {\n  [addContact]: (state, { payload }) => [...state, payload],\n  [deleteContact]: (state, { payload }) =>\n    state.filter((contact) => contact.id !== payload),\n});\n\n// const filter = (state = \"\", { type, payload }) => {\n//   switch (type) {\n//     case types.CHANGE_FILTER:\n//       return payload;\n//   }\n//   return state;\n// };\n\nconst filter = createReducer(\"\", {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport contactsReducer from \"./contacts/contactsReducer\";\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n];\n\nconst contactsPersistConfig = {\n  key: \"contacts\",\n  storage,\n  blacklist: [\"filter\"],\n};\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  middleware,\n  devTools: true,\n});\n\nconst persistor = persistStore(store);\n\nexport default { store, persistor };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"contactForm_form__YedcG\",\"input\":\"contactForm_input__2KXel\",\"button\":\"contactForm_button__l3K4C\"};"],"sourceRoot":""}